# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# Generated by Glenn Jocher (glenn.jocher@ultralytics.com) for https://github.com/ultralytics

import argparse
import time
from pathlib import Path
from flickrapi import FlickrAPI
from utils.general import download_uri
from tqdm import tqdm
import sys

key = "2b58cb9e9948ddca307c5eeac7008aba"  
secret = "002f592155836c09"


def get_urls(search="honeybees on flowers", n=10, download=False, save_dir=None):
    """Fetch Flickr URLs for `search` term images, optionally downloading them."""
    t = time.time()
    flickr = FlickrAPI(key, secret)
    license = ()  # https://www.flickr.com/services/api/explore/?method=flickr.photos.licenses.getInfo
    photos = flickr.walk(
        text=search,  # http://www.flickr.com/services/api/flickr.photos.search.html
        extras="url_o",
        per_page=500,  # 1-500
        license=license,
        sort="relevance",
    )

    if download:
        if save_dir:
            dir_path = Path(save_dir) / search.replace(" ", "_")
        else:
            dir_path = Path.cwd() / "images" / search.replace(" ", "_")
        dir_path.mkdir(parents=True, exist_ok=True)

    # 创建进度条，使用更紧凑的格式
    pbar = tqdm(
        total=n,
        desc=f"[{search}]",
        unit='张',
        bar_format='{desc:<30} |{bar:50}| {percentage:3.0f}% {n_fmt}/{total_fmt} [{elapsed}<{remaining}]',
        ncols=120
    )
    
    count = 0
    for photo in photos:
        if count >= n:
            break
            
        try:
            url = photo.get("url_o")  # original size
            if url is None:
                url = f"https://farm{photo.get('farm')}.staticflickr.com/{photo.get('server')}/{photo.get('id')}_{photo.get('secret')}_b.jpg"

            if download:
                try:
                    if download_uri(url, dir_path):
                        count += 1
                        pbar.update(1)
                except Exception as e:
                    tqdm.write(f"[{search}] 下载失败: {str(e).split('。')[0]}")
                    continue
                
        except Exception as e:
            tqdm.write(f"[{search}] 错误: {str(e).split('。')[0]}")
            
    pbar.close()
    # 下载完成后显示简短总结
    tqdm.write(f"[{search}] 完成: {count}/{n} 张图片 ({time.time() - t:.1f}s)")
    return count


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--search", nargs="+", default=["honeybees on flowers"], help="flickr search term")
    parser.add_argument("--n", type=int, default=10, help="number of images")
    parser.add_argument("--download", action="store_true", help="download images")
    opt = parser.parse_args()

    help_url = "https://www.flickr.com/services/apps/create/apply"
    assert key and secret, f"Flickr API key required in flickr_scraper.py L11-12. To apply visit {help_url}"

    for search in opt.search:
        get_urls(search=search, n=opt.n, download=opt.download)
